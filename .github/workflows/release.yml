name: Release Workflow

on:
  release:
    types: [created]

env:
  IMAGE_NAME: surrealdb-migrations
  REGISTRY: ghcr.io
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1

jobs:
  release-binary:
    name: release ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            archive: zip
          - target: x86_64-unknown-linux-musl
            archive: tar.gz tar.xz tar.zst
          # - target: x86_64-apple-darwin
          #   archive: zip
          - target: wasm32-wasi
            archive: zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install 1.80.1 toolchain
        uses: dtolnay/rust-toolchain@1.80.1

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Compile and release
        uses: rust-build/rust-build.action@v1.4.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          RUSTTARGET: ${{ matrix.target }}
          ARCHIVE_TYPES: ${{ matrix.archive }}
          EXTRA_FILES: "readme.md LICENSE"
          TOOLCHAIN_VERSION: stable

  release-exe:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install 1.80.1 toolchain
        uses: dtolnay/rust-toolchain@1.80.1

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release
        run: cargo build --release

      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: target/release/surrealdb-migrations.exe
          token: ${{ secrets.GITHUB_TOKEN }}

  release-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64/v8
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: matrix.platform != 'linux/amd64'
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=edge,branch=main
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.api
          platforms: ${{ matrix.platform }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  publish:
    needs: [release-binary, release-exe]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Publish crate
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          ignore-unpublished-changes: true
